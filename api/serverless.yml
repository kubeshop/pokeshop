---
service: pokeshop-api-demo
frameworkVersion: "3"

package:
  patterns:
    - src/**
    - "!.vscode/**"
    - "!infra/**"
    - "!node_modules/typescript/**"
    - "!node_modules/aws-sdk/**"
    - "!node_modules/serverless-offline/**"
    - "!node_modules/.prisma/client/libquery_engine-*"
    - "node_modules/.prisma/client/libquery_engine-rhel-*"
    - "!node_modules/prisma/libquery_engine-*"
    - "!node_modules/@prisma/engines/**"

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-offline-sqs
  - serverless-offline-s3
  - serverless-vpc-plugin

custom:
  databaseName: "pokeshop3"
  databaseUsername: "ashketchum"
  databasePassword: "squirtle123"
  databaseEndpoint:
    Fn::GetAtt: [PokeDatabase, "Endpoint.Address"]
  s3BucketArn:
    Fn::GetAtt: [ImageBucket, Arn]
  keyPairName: "pokeshop-api"
  vpcConfig:
    cidrBlock: "10.0.0.0/16"
    createNetworkAcl: false
    createDbSubnet: true
    createNatInstance: true
    createBastionHost: true
    bastionHostKeyName: ${self:custom.keyPairName}
    zones:
      - us-east-1a
      - us-east-1b
    subnetGroups:
      - rds
      - elasticache

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  httpApi:
    cors: true
    payload: "1.0"
  environment:
    NODE_OPTIONS: --require ./src/utils/tracer.js
    COLLECTOR_ENDPOINT: 44.197.188.104:4317
    DATABASE_URL:
      Fn::Join:
        - ""
        - - "postgres://"
          - ${self:custom.databaseUsername}
          - ":"
          - ${self:custom.databasePassword}
          - "@"
          - ${self:custom.databaseEndpoint}
          - "/"
          - ${self:custom.databaseName}
          - "?schema=public"
    SQS_QUEUE_URL: { Ref: AssetsQueue }
    S3_ARN: { Ref: ImageBucket }
    POKE_API_BASE_URL: "https://pokeapi.co/api/v2"
    REDIS_URL:
      Fn::GetAtt: [PokeCache, "RedisEndpoint.Address"]
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - sqs:*
          Resource:
            Fn::GetAtt: [AssetsQueue, Arn]
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
          Resource:
            Fn::GetAtt: [ImageBucket, Arn]
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
          Resource:
            - Fn::Join:
                - ""
                - - ${self:custom.s3BucketArn}
                  - "/*"

functions:
  get:
    handler: ./src/handler.get
    events:
      - httpApi:
          path: /pokemon
          method: get
  create:
    handler: ./src/handler.create
    events:
      - httpApi:
          path: /pokemon
          method: post
  update:
    handler: ./src/handler.update
    events:
      - httpApi:
          path: /pokemon/{id}
          method: patch
  remove:
    handler: ./src/handler.remove
    events:
      - httpApi:
          path: /pokemon/{id}
          method: delete
  import:
    handler: ./src/handler.importPokemon
    events:
      - httpApi:
          path: /pokemon/import
          method: post
  search:
    handler: ./src/handler.search
    events:
      - httpApi:
          path: /pokemon/search
          method: get
  featured:
    handler: ./src/handler.featured
    events:
      - httpApi:
          path: /pokemon/featured
          method: get
  imageDownloader:
    handler: ./src/handler.imageDownloader
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - AssetsQueue
              - Arn

resources:
  - ${file(./infra/rds.yml)}
  - ${file(./infra/queue.yml)}
  - ${file(./infra/s3.yml)}
  - ${file(./infra/elasticache.yml)}
  - ${file(./infra/ecs-cluster.yml)}
  - ${file(./infra/ecs-aws-otel-collector.yml)}
