service: pokemon
frameworkVersion: "3"

plugins:
  - serverless-webpack
  - serverless-vpc-plugin

custom:
  webpack:
    webpackConfig: 'serverless.webpack.config.js'
    includeModules: true
  databaseName: "pokeshop"
  databaseUsername: "ashketchum"
  databasePassword: "squirtle123"
  databaseEndpoint:
    Fn::GetAtt: [PokeDatabase, "Endpoint.Address"]
  s3BucketArn:
    Fn::GetAtt: [ImageBucket, Arn]
  # this needs to be created beforehand
  keyPairName: "pokemon-micro-app"
  vpcConfig:
    cidrBlock: "10.0.0.0/16"
    createNetworkAcl: false
    createDbSubnet: true
    createNatInstance: true
    createBastionHost: true
    bastionHostKeyName: ${self:custom.keyPairName}
    zones:
      - us-east-2a
      - us-east-2b
    subnetGroups:
      - rds
      - elasticache

provider:
  name: aws
  region: us-east-2
  runtime: nodejs14.x
#  layers:
#    - arn:aws:lambda:us-east-2:901920570463:layer:aws-otel-nodejs-amd64-ver-1-7-0:1
  httpApi:
    cors: true
    payload: "1.0"
  environment:
    IS_SERVERLESS: true
#    OPENTELEMETRY_COLLECTOR_CONFIG_FILE: /var/task/collector.yaml
#    AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-handler
    COLLECTOR_ENDPOINT: http://${ssm:/ec2/public_ip}:55679
    DATABASE_URL:
      Fn::Join:
        - ""
        - - "postgres://"
          - ${self:custom.databaseUsername}
          - ":"
          - ${self:custom.databasePassword}
          - "@"
          - ${self:custom.databaseEndpoint}
          - "/"
          - ${self:custom.databaseName}
          - "?schema=public"
    SQS_QUEUE_URL: { Ref: AssetsQueue }
    S3_ARN: { Ref: ImageBucket }
    POKE_API_BASE_URL: "https://pokeapi.co/api/v2"
    REDIS_URL:
      Fn::GetAtt: [PokeCache, "RedisEndpoint.Address"]
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - sqs:*
          Resource:
            Fn::GetAtt: [AssetsQueue, Arn]
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
          Resource:
            Fn::GetAtt: [ImageBucket, Arn]
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
          Resource:
            - Fn::Join:
                - ""
                - - ${self:custom.s3BucketArn}
                  - "/*"

functions:
  sync_pokemon:
    handler: ./src/serverless.worker.startWorker
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - AssetsQueue
              - Arn
  get:
    handler: ./handler.get
    events:
      - httpApi:
          path: /pokemon
          method: get
  create:
    handler: ./handler.create
    events:
      - httpApi:
          path: /pokemon
          method: post
  update:
    handler: ./handler.update
    events:
      - httpApi:
          path: /pokemon/{id}
          method: patch
  remove:
    handler: ./handler.remove
    events:
      - httpApi:
          path: /pokemon/{id}
          method: delete
  import:
    handler: ./handler.importPokemon
    events:
      - httpApi:
          path: /pokemon/import
          method: post
  search:
    handler: ./handler.search
    events:
      - httpApi:
          path: /pokemon/search
          method: get
  featured:
    handler: ./handler.featured
    events:
      - httpApi:
          path: /pokemon/featured
          method: get
  imageDownloader:
    handler: ./handler.imageDownloader
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - AssetsQueue
              - Arn

resources:
  - ${file(./infra/rds.yml)}
  - ${file(./infra/queue.yml)}
  - ${file(./infra/s3.yml)}
  - ${file(./infra/elasticache.yml)}
